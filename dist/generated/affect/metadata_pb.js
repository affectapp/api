// source: affect/metadata.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.affect.AuthMetadata', null, global);
goog.exportSymbol('proto.affect.AuthMetadata.AnonymousPeerToken', null, global);
goog.exportSymbol('proto.affect.AuthMetadata.EndUserPeerToken', null, global);
goog.exportSymbol('proto.affect.AuthMetadata.ImpersonatedUserPeerToken', null, global);
goog.exportSymbol('proto.affect.AuthMetadata.PeerTokenCase', null, global);
goog.exportSymbol('proto.affect.AuthMetadata.PrivilegedPeerToken', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.affect.AuthMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.affect.AuthMetadata.oneofGroups_);
};
goog.inherits(proto.affect.AuthMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.affect.AuthMetadata.displayName = 'proto.affect.AuthMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.affect.AuthMetadata.EndUserPeerToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.affect.AuthMetadata.EndUserPeerToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.affect.AuthMetadata.EndUserPeerToken.displayName = 'proto.affect.AuthMetadata.EndUserPeerToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.affect.AuthMetadata.PrivilegedPeerToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.affect.AuthMetadata.PrivilegedPeerToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.affect.AuthMetadata.PrivilegedPeerToken.displayName = 'proto.affect.AuthMetadata.PrivilegedPeerToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.affect.AuthMetadata.ImpersonatedUserPeerToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.affect.AuthMetadata.ImpersonatedUserPeerToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.affect.AuthMetadata.ImpersonatedUserPeerToken.displayName = 'proto.affect.AuthMetadata.ImpersonatedUserPeerToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.affect.AuthMetadata.AnonymousPeerToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.affect.AuthMetadata.AnonymousPeerToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.affect.AuthMetadata.AnonymousPeerToken.displayName = 'proto.affect.AuthMetadata.AnonymousPeerToken';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.affect.AuthMetadata.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.affect.AuthMetadata.PeerTokenCase = {
  PEER_TOKEN_NOT_SET: 0,
  END_USER: 1,
  PRIVILEGED: 2,
  IMPERSONATED_USER: 3,
  ANONYMOUS: 4
};

/**
 * @return {proto.affect.AuthMetadata.PeerTokenCase}
 */
proto.affect.AuthMetadata.prototype.getPeerTokenCase = function() {
  return /** @type {proto.affect.AuthMetadata.PeerTokenCase} */(jspb.Message.computeOneofCase(this, proto.affect.AuthMetadata.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.affect.AuthMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.affect.AuthMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.affect.AuthMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.AuthMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    endUser: (f = msg.getEndUser()) && proto.affect.AuthMetadata.EndUserPeerToken.toObject(includeInstance, f),
    privileged: (f = msg.getPrivileged()) && proto.affect.AuthMetadata.PrivilegedPeerToken.toObject(includeInstance, f),
    impersonatedUser: (f = msg.getImpersonatedUser()) && proto.affect.AuthMetadata.ImpersonatedUserPeerToken.toObject(includeInstance, f),
    anonymous: (f = msg.getAnonymous()) && proto.affect.AuthMetadata.AnonymousPeerToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.affect.AuthMetadata}
 */
proto.affect.AuthMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.affect.AuthMetadata;
  return proto.affect.AuthMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.affect.AuthMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.affect.AuthMetadata}
 */
proto.affect.AuthMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.affect.AuthMetadata.EndUserPeerToken;
      reader.readMessage(value,proto.affect.AuthMetadata.EndUserPeerToken.deserializeBinaryFromReader);
      msg.setEndUser(value);
      break;
    case 2:
      var value = new proto.affect.AuthMetadata.PrivilegedPeerToken;
      reader.readMessage(value,proto.affect.AuthMetadata.PrivilegedPeerToken.deserializeBinaryFromReader);
      msg.setPrivileged(value);
      break;
    case 3:
      var value = new proto.affect.AuthMetadata.ImpersonatedUserPeerToken;
      reader.readMessage(value,proto.affect.AuthMetadata.ImpersonatedUserPeerToken.deserializeBinaryFromReader);
      msg.setImpersonatedUser(value);
      break;
    case 4:
      var value = new proto.affect.AuthMetadata.AnonymousPeerToken;
      reader.readMessage(value,proto.affect.AuthMetadata.AnonymousPeerToken.deserializeBinaryFromReader);
      msg.setAnonymous(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.affect.AuthMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.affect.AuthMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.affect.AuthMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.AuthMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.affect.AuthMetadata.EndUserPeerToken.serializeBinaryToWriter
    );
  }
  f = message.getPrivileged();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.affect.AuthMetadata.PrivilegedPeerToken.serializeBinaryToWriter
    );
  }
  f = message.getImpersonatedUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.affect.AuthMetadata.ImpersonatedUserPeerToken.serializeBinaryToWriter
    );
  }
  f = message.getAnonymous();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.affect.AuthMetadata.AnonymousPeerToken.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.affect.AuthMetadata.EndUserPeerToken.prototype.toObject = function(opt_includeInstance) {
  return proto.affect.AuthMetadata.EndUserPeerToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.affect.AuthMetadata.EndUserPeerToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.AuthMetadata.EndUserPeerToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    firebaseIdToken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.affect.AuthMetadata.EndUserPeerToken}
 */
proto.affect.AuthMetadata.EndUserPeerToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.affect.AuthMetadata.EndUserPeerToken;
  return proto.affect.AuthMetadata.EndUserPeerToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.affect.AuthMetadata.EndUserPeerToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.affect.AuthMetadata.EndUserPeerToken}
 */
proto.affect.AuthMetadata.EndUserPeerToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirebaseIdToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.affect.AuthMetadata.EndUserPeerToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.affect.AuthMetadata.EndUserPeerToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.affect.AuthMetadata.EndUserPeerToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.AuthMetadata.EndUserPeerToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirebaseIdToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string firebase_id_token = 1;
 * @return {string}
 */
proto.affect.AuthMetadata.EndUserPeerToken.prototype.getFirebaseIdToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.AuthMetadata.EndUserPeerToken} returns this
 */
proto.affect.AuthMetadata.EndUserPeerToken.prototype.setFirebaseIdToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.affect.AuthMetadata.PrivilegedPeerToken.prototype.toObject = function(opt_includeInstance) {
  return proto.affect.AuthMetadata.PrivilegedPeerToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.affect.AuthMetadata.PrivilegedPeerToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.AuthMetadata.PrivilegedPeerToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    firebaseIdToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accessReason: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.affect.AuthMetadata.PrivilegedPeerToken}
 */
proto.affect.AuthMetadata.PrivilegedPeerToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.affect.AuthMetadata.PrivilegedPeerToken;
  return proto.affect.AuthMetadata.PrivilegedPeerToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.affect.AuthMetadata.PrivilegedPeerToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.affect.AuthMetadata.PrivilegedPeerToken}
 */
proto.affect.AuthMetadata.PrivilegedPeerToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirebaseIdToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.affect.AuthMetadata.PrivilegedPeerToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.affect.AuthMetadata.PrivilegedPeerToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.affect.AuthMetadata.PrivilegedPeerToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.AuthMetadata.PrivilegedPeerToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirebaseIdToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccessReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string firebase_id_token = 1;
 * @return {string}
 */
proto.affect.AuthMetadata.PrivilegedPeerToken.prototype.getFirebaseIdToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.AuthMetadata.PrivilegedPeerToken} returns this
 */
proto.affect.AuthMetadata.PrivilegedPeerToken.prototype.setFirebaseIdToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string access_reason = 2;
 * @return {string}
 */
proto.affect.AuthMetadata.PrivilegedPeerToken.prototype.getAccessReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.AuthMetadata.PrivilegedPeerToken} returns this
 */
proto.affect.AuthMetadata.PrivilegedPeerToken.prototype.setAccessReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.affect.AuthMetadata.ImpersonatedUserPeerToken.prototype.toObject = function(opt_includeInstance) {
  return proto.affect.AuthMetadata.ImpersonatedUserPeerToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.affect.AuthMetadata.ImpersonatedUserPeerToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.AuthMetadata.ImpersonatedUserPeerToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    firebaseIdToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.affect.AuthMetadata.ImpersonatedUserPeerToken}
 */
proto.affect.AuthMetadata.ImpersonatedUserPeerToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.affect.AuthMetadata.ImpersonatedUserPeerToken;
  return proto.affect.AuthMetadata.ImpersonatedUserPeerToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.affect.AuthMetadata.ImpersonatedUserPeerToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.affect.AuthMetadata.ImpersonatedUserPeerToken}
 */
proto.affect.AuthMetadata.ImpersonatedUserPeerToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirebaseIdToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.affect.AuthMetadata.ImpersonatedUserPeerToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.affect.AuthMetadata.ImpersonatedUserPeerToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.affect.AuthMetadata.ImpersonatedUserPeerToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.AuthMetadata.ImpersonatedUserPeerToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirebaseIdToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string firebase_id_token = 1;
 * @return {string}
 */
proto.affect.AuthMetadata.ImpersonatedUserPeerToken.prototype.getFirebaseIdToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.AuthMetadata.ImpersonatedUserPeerToken} returns this
 */
proto.affect.AuthMetadata.ImpersonatedUserPeerToken.prototype.setFirebaseIdToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.affect.AuthMetadata.ImpersonatedUserPeerToken.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.AuthMetadata.ImpersonatedUserPeerToken} returns this
 */
proto.affect.AuthMetadata.ImpersonatedUserPeerToken.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.affect.AuthMetadata.AnonymousPeerToken.prototype.toObject = function(opt_includeInstance) {
  return proto.affect.AuthMetadata.AnonymousPeerToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.affect.AuthMetadata.AnonymousPeerToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.AuthMetadata.AnonymousPeerToken.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.affect.AuthMetadata.AnonymousPeerToken}
 */
proto.affect.AuthMetadata.AnonymousPeerToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.affect.AuthMetadata.AnonymousPeerToken;
  return proto.affect.AuthMetadata.AnonymousPeerToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.affect.AuthMetadata.AnonymousPeerToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.affect.AuthMetadata.AnonymousPeerToken}
 */
proto.affect.AuthMetadata.AnonymousPeerToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.affect.AuthMetadata.AnonymousPeerToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.affect.AuthMetadata.AnonymousPeerToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.affect.AuthMetadata.AnonymousPeerToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.AuthMetadata.AnonymousPeerToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional EndUserPeerToken end_user = 1;
 * @return {?proto.affect.AuthMetadata.EndUserPeerToken}
 */
proto.affect.AuthMetadata.prototype.getEndUser = function() {
  return /** @type{?proto.affect.AuthMetadata.EndUserPeerToken} */ (
    jspb.Message.getWrapperField(this, proto.affect.AuthMetadata.EndUserPeerToken, 1));
};


/**
 * @param {?proto.affect.AuthMetadata.EndUserPeerToken|undefined} value
 * @return {!proto.affect.AuthMetadata} returns this
*/
proto.affect.AuthMetadata.prototype.setEndUser = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.affect.AuthMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.AuthMetadata} returns this
 */
proto.affect.AuthMetadata.prototype.clearEndUser = function() {
  return this.setEndUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.AuthMetadata.prototype.hasEndUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PrivilegedPeerToken privileged = 2;
 * @return {?proto.affect.AuthMetadata.PrivilegedPeerToken}
 */
proto.affect.AuthMetadata.prototype.getPrivileged = function() {
  return /** @type{?proto.affect.AuthMetadata.PrivilegedPeerToken} */ (
    jspb.Message.getWrapperField(this, proto.affect.AuthMetadata.PrivilegedPeerToken, 2));
};


/**
 * @param {?proto.affect.AuthMetadata.PrivilegedPeerToken|undefined} value
 * @return {!proto.affect.AuthMetadata} returns this
*/
proto.affect.AuthMetadata.prototype.setPrivileged = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.affect.AuthMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.AuthMetadata} returns this
 */
proto.affect.AuthMetadata.prototype.clearPrivileged = function() {
  return this.setPrivileged(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.AuthMetadata.prototype.hasPrivileged = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ImpersonatedUserPeerToken impersonated_user = 3;
 * @return {?proto.affect.AuthMetadata.ImpersonatedUserPeerToken}
 */
proto.affect.AuthMetadata.prototype.getImpersonatedUser = function() {
  return /** @type{?proto.affect.AuthMetadata.ImpersonatedUserPeerToken} */ (
    jspb.Message.getWrapperField(this, proto.affect.AuthMetadata.ImpersonatedUserPeerToken, 3));
};


/**
 * @param {?proto.affect.AuthMetadata.ImpersonatedUserPeerToken|undefined} value
 * @return {!proto.affect.AuthMetadata} returns this
*/
proto.affect.AuthMetadata.prototype.setImpersonatedUser = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.affect.AuthMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.AuthMetadata} returns this
 */
proto.affect.AuthMetadata.prototype.clearImpersonatedUser = function() {
  return this.setImpersonatedUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.AuthMetadata.prototype.hasImpersonatedUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AnonymousPeerToken anonymous = 4;
 * @return {?proto.affect.AuthMetadata.AnonymousPeerToken}
 */
proto.affect.AuthMetadata.prototype.getAnonymous = function() {
  return /** @type{?proto.affect.AuthMetadata.AnonymousPeerToken} */ (
    jspb.Message.getWrapperField(this, proto.affect.AuthMetadata.AnonymousPeerToken, 4));
};


/**
 * @param {?proto.affect.AuthMetadata.AnonymousPeerToken|undefined} value
 * @return {!proto.affect.AuthMetadata} returns this
*/
proto.affect.AuthMetadata.prototype.setAnonymous = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.affect.AuthMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.AuthMetadata} returns this
 */
proto.affect.AuthMetadata.prototype.clearAnonymous = function() {
  return this.setAnonymous(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.AuthMetadata.prototype.hasAnonymous = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.affect);
