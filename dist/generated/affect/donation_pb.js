// source: affect/donation.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_type_money_pb = require('../google/type/money_pb.js');
goog.object.extend(proto, google_type_money_pb);
goog.exportSymbol('proto.affect.CreateDonationRequest', null, global);
goog.exportSymbol('proto.affect.Donation', null, global);
goog.exportSymbol('proto.affect.Donation.StatusCase', null, global);
goog.exportSymbol('proto.affect.DonationCompletedStatus', null, global);
goog.exportSymbol('proto.affect.DonationFailedStatus', null, global);
goog.exportSymbol('proto.affect.DonationFailureCause', null, global);
goog.exportSymbol('proto.affect.DonationPendingStatus', null, global);
goog.exportSymbol('proto.affect.GetDonationRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.affect.Donation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.affect.Donation.oneofGroups_);
};
goog.inherits(proto.affect.Donation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.affect.Donation.displayName = 'proto.affect.Donation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.affect.DonationPendingStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.affect.DonationPendingStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.affect.DonationPendingStatus.displayName = 'proto.affect.DonationPendingStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.affect.DonationCompletedStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.affect.DonationCompletedStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.affect.DonationCompletedStatus.displayName = 'proto.affect.DonationCompletedStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.affect.DonationFailedStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.affect.DonationFailedStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.affect.DonationFailedStatus.displayName = 'proto.affect.DonationFailedStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.affect.CreateDonationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.affect.CreateDonationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.affect.CreateDonationRequest.displayName = 'proto.affect.CreateDonationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.affect.GetDonationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.affect.GetDonationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.affect.GetDonationRequest.displayName = 'proto.affect.GetDonationRequest';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.affect.Donation.oneofGroups_ = [[8,9,10]];

/**
 * @enum {number}
 */
proto.affect.Donation.StatusCase = {
  STATUS_NOT_SET: 0,
  PENDING: 8,
  COMPLETED: 9,
  FAILED: 10
};

/**
 * @return {proto.affect.Donation.StatusCase}
 */
proto.affect.Donation.prototype.getStatusCase = function() {
  return /** @type {proto.affect.Donation.StatusCase} */(jspb.Message.computeOneofCase(this, proto.affect.Donation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.affect.Donation.prototype.toObject = function(opt_includeInstance) {
  return proto.affect.Donation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.affect.Donation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.Donation.toObject = function(includeInstance, msg) {
  var f, obj = {
    donationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createTime: (f = msg.getCreateTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updateTime: (f = msg.getUpdateTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    nonprofitId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    amount: (f = msg.getAmount()) && google_type_money_pb.Money.toObject(includeInstance, f),
    causeId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    pending: (f = msg.getPending()) && proto.affect.DonationPendingStatus.toObject(includeInstance, f),
    completed: (f = msg.getCompleted()) && proto.affect.DonationCompletedStatus.toObject(includeInstance, f),
    failed: (f = msg.getFailed()) && proto.affect.DonationFailedStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.affect.Donation}
 */
proto.affect.Donation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.affect.Donation;
  return proto.affect.Donation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.affect.Donation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.affect.Donation}
 */
proto.affect.Donation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDonationId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreateTime(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdateTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonprofitId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 6:
      var value = new google_type_money_pb.Money;
      reader.readMessage(value,google_type_money_pb.Money.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCauseId(value);
      break;
    case 8:
      var value = new proto.affect.DonationPendingStatus;
      reader.readMessage(value,proto.affect.DonationPendingStatus.deserializeBinaryFromReader);
      msg.setPending(value);
      break;
    case 9:
      var value = new proto.affect.DonationCompletedStatus;
      reader.readMessage(value,proto.affect.DonationCompletedStatus.deserializeBinaryFromReader);
      msg.setCompleted(value);
      break;
    case 10:
      var value = new proto.affect.DonationFailedStatus;
      reader.readMessage(value,proto.affect.DonationFailedStatus.deserializeBinaryFromReader);
      msg.setFailed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.affect.Donation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.affect.Donation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.affect.Donation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.Donation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDonationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreateTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdateTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getNonprofitId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_type_money_pb.Money.serializeBinaryToWriter
    );
  }
  f = message.getCauseId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPending();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.affect.DonationPendingStatus.serializeBinaryToWriter
    );
  }
  f = message.getCompleted();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.affect.DonationCompletedStatus.serializeBinaryToWriter
    );
  }
  f = message.getFailed();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.affect.DonationFailedStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string donation_id = 1;
 * @return {string}
 */
proto.affect.Donation.prototype.getDonationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.Donation} returns this
 */
proto.affect.Donation.prototype.setDonationId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp create_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.affect.Donation.prototype.getCreateTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.affect.Donation} returns this
*/
proto.affect.Donation.prototype.setCreateTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.Donation} returns this
 */
proto.affect.Donation.prototype.clearCreateTime = function() {
  return this.setCreateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.Donation.prototype.hasCreateTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp update_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.affect.Donation.prototype.getUpdateTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.affect.Donation} returns this
*/
proto.affect.Donation.prototype.setUpdateTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.Donation} returns this
 */
proto.affect.Donation.prototype.clearUpdateTime = function() {
  return this.setUpdateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.Donation.prototype.hasUpdateTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string nonprofit_id = 4;
 * @return {string}
 */
proto.affect.Donation.prototype.getNonprofitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.Donation} returns this
 */
proto.affect.Donation.prototype.setNonprofitId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string user_id = 5;
 * @return {string}
 */
proto.affect.Donation.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.Donation} returns this
 */
proto.affect.Donation.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional google.type.Money amount = 6;
 * @return {?proto.google.type.Money}
 */
proto.affect.Donation.prototype.getAmount = function() {
  return /** @type{?proto.google.type.Money} */ (
    jspb.Message.getWrapperField(this, google_type_money_pb.Money, 6));
};


/**
 * @param {?proto.google.type.Money|undefined} value
 * @return {!proto.affect.Donation} returns this
*/
proto.affect.Donation.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.Donation} returns this
 */
proto.affect.Donation.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.Donation.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string cause_id = 7;
 * @return {string}
 */
proto.affect.Donation.prototype.getCauseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.Donation} returns this
 */
proto.affect.Donation.prototype.setCauseId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional DonationPendingStatus pending = 8;
 * @return {?proto.affect.DonationPendingStatus}
 */
proto.affect.Donation.prototype.getPending = function() {
  return /** @type{?proto.affect.DonationPendingStatus} */ (
    jspb.Message.getWrapperField(this, proto.affect.DonationPendingStatus, 8));
};


/**
 * @param {?proto.affect.DonationPendingStatus|undefined} value
 * @return {!proto.affect.Donation} returns this
*/
proto.affect.Donation.prototype.setPending = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.affect.Donation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.Donation} returns this
 */
proto.affect.Donation.prototype.clearPending = function() {
  return this.setPending(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.Donation.prototype.hasPending = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional DonationCompletedStatus completed = 9;
 * @return {?proto.affect.DonationCompletedStatus}
 */
proto.affect.Donation.prototype.getCompleted = function() {
  return /** @type{?proto.affect.DonationCompletedStatus} */ (
    jspb.Message.getWrapperField(this, proto.affect.DonationCompletedStatus, 9));
};


/**
 * @param {?proto.affect.DonationCompletedStatus|undefined} value
 * @return {!proto.affect.Donation} returns this
*/
proto.affect.Donation.prototype.setCompleted = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.affect.Donation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.Donation} returns this
 */
proto.affect.Donation.prototype.clearCompleted = function() {
  return this.setCompleted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.Donation.prototype.hasCompleted = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional DonationFailedStatus failed = 10;
 * @return {?proto.affect.DonationFailedStatus}
 */
proto.affect.Donation.prototype.getFailed = function() {
  return /** @type{?proto.affect.DonationFailedStatus} */ (
    jspb.Message.getWrapperField(this, proto.affect.DonationFailedStatus, 10));
};


/**
 * @param {?proto.affect.DonationFailedStatus|undefined} value
 * @return {!proto.affect.Donation} returns this
*/
proto.affect.Donation.prototype.setFailed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.affect.Donation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.Donation} returns this
 */
proto.affect.Donation.prototype.clearFailed = function() {
  return this.setFailed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.Donation.prototype.hasFailed = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.affect.DonationPendingStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.affect.DonationPendingStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.affect.DonationPendingStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.DonationPendingStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    affiliateId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.affect.DonationPendingStatus}
 */
proto.affect.DonationPendingStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.affect.DonationPendingStatus;
  return proto.affect.DonationPendingStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.affect.DonationPendingStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.affect.DonationPendingStatus}
 */
proto.affect.DonationPendingStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAffiliateId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.affect.DonationPendingStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.affect.DonationPendingStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.affect.DonationPendingStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.DonationPendingStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAffiliateId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string affiliate_id = 1;
 * @return {string}
 */
proto.affect.DonationPendingStatus.prototype.getAffiliateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.DonationPendingStatus} returns this
 */
proto.affect.DonationPendingStatus.prototype.setAffiliateId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.affect.DonationCompletedStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.affect.DonationCompletedStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.affect.DonationCompletedStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.DonationCompletedStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    completionTime: (f = msg.getCompletionTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    affiliateId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.affect.DonationCompletedStatus}
 */
proto.affect.DonationCompletedStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.affect.DonationCompletedStatus;
  return proto.affect.DonationCompletedStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.affect.DonationCompletedStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.affect.DonationCompletedStatus}
 */
proto.affect.DonationCompletedStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCompletionTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAffiliateId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.affect.DonationCompletedStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.affect.DonationCompletedStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.affect.DonationCompletedStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.DonationCompletedStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCompletionTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAffiliateId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.affect.DonationCompletedStatus.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.DonationCompletedStatus} returns this
 */
proto.affect.DonationCompletedStatus.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp completion_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.affect.DonationCompletedStatus.prototype.getCompletionTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.affect.DonationCompletedStatus} returns this
*/
proto.affect.DonationCompletedStatus.prototype.setCompletionTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.DonationCompletedStatus} returns this
 */
proto.affect.DonationCompletedStatus.prototype.clearCompletionTime = function() {
  return this.setCompletionTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.DonationCompletedStatus.prototype.hasCompletionTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string affiliate_id = 3;
 * @return {string}
 */
proto.affect.DonationCompletedStatus.prototype.getAffiliateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.DonationCompletedStatus} returns this
 */
proto.affect.DonationCompletedStatus.prototype.setAffiliateId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.affect.DonationFailedStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.affect.DonationFailedStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.affect.DonationFailedStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.DonationFailedStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    failureTime: (f = msg.getFailureTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    failureCause: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.affect.DonationFailedStatus}
 */
proto.affect.DonationFailedStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.affect.DonationFailedStatus;
  return proto.affect.DonationFailedStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.affect.DonationFailedStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.affect.DonationFailedStatus}
 */
proto.affect.DonationFailedStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFailureTime(value);
      break;
    case 3:
      var value = /** @type {!proto.affect.DonationFailureCause} */ (reader.readEnum());
      msg.setFailureCause(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.affect.DonationFailedStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.affect.DonationFailedStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.affect.DonationFailedStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.DonationFailedStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFailureTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFailureCause();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.affect.DonationFailedStatus.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.DonationFailedStatus} returns this
 */
proto.affect.DonationFailedStatus.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp failure_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.affect.DonationFailedStatus.prototype.getFailureTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.affect.DonationFailedStatus} returns this
*/
proto.affect.DonationFailedStatus.prototype.setFailureTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.DonationFailedStatus} returns this
 */
proto.affect.DonationFailedStatus.prototype.clearFailureTime = function() {
  return this.setFailureTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.DonationFailedStatus.prototype.hasFailureTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DonationFailureCause failure_cause = 3;
 * @return {!proto.affect.DonationFailureCause}
 */
proto.affect.DonationFailedStatus.prototype.getFailureCause = function() {
  return /** @type {!proto.affect.DonationFailureCause} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.affect.DonationFailureCause} value
 * @return {!proto.affect.DonationFailedStatus} returns this
 */
proto.affect.DonationFailedStatus.prototype.setFailureCause = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.affect.CreateDonationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.affect.CreateDonationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.affect.CreateDonationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.CreateDonationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonprofitId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: (f = msg.getAmount()) && google_type_money_pb.Money.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.affect.CreateDonationRequest}
 */
proto.affect.CreateDonationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.affect.CreateDonationRequest;
  return proto.affect.CreateDonationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.affect.CreateDonationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.affect.CreateDonationRequest}
 */
proto.affect.CreateDonationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonprofitId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = new google_type_money_pb.Money;
      reader.readMessage(value,google_type_money_pb.Money.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.affect.CreateDonationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.affect.CreateDonationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.affect.CreateDonationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.CreateDonationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonprofitId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_type_money_pb.Money.serializeBinaryToWriter
    );
  }
};


/**
 * optional string nonprofit_id = 1;
 * @return {string}
 */
proto.affect.CreateDonationRequest.prototype.getNonprofitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.CreateDonationRequest} returns this
 */
proto.affect.CreateDonationRequest.prototype.setNonprofitId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.affect.CreateDonationRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.CreateDonationRequest} returns this
 */
proto.affect.CreateDonationRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.type.Money amount = 3;
 * @return {?proto.google.type.Money}
 */
proto.affect.CreateDonationRequest.prototype.getAmount = function() {
  return /** @type{?proto.google.type.Money} */ (
    jspb.Message.getWrapperField(this, google_type_money_pb.Money, 3));
};


/**
 * @param {?proto.google.type.Money|undefined} value
 * @return {!proto.affect.CreateDonationRequest} returns this
*/
proto.affect.CreateDonationRequest.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.affect.CreateDonationRequest} returns this
 */
proto.affect.CreateDonationRequest.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.affect.CreateDonationRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.affect.GetDonationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.affect.GetDonationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.affect.GetDonationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.GetDonationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonprofitId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.affect.GetDonationRequest}
 */
proto.affect.GetDonationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.affect.GetDonationRequest;
  return proto.affect.GetDonationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.affect.GetDonationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.affect.GetDonationRequest}
 */
proto.affect.GetDonationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonprofitId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.affect.GetDonationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.affect.GetDonationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.affect.GetDonationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.affect.GetDonationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonprofitId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string nonprofit_id = 1;
 * @return {string}
 */
proto.affect.GetDonationRequest.prototype.getNonprofitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.affect.GetDonationRequest} returns this
 */
proto.affect.GetDonationRequest.prototype.setNonprofitId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.affect.DonationFailureCause = {
  DONATION_FAILURE_CAUSE_UNSPECIFIED: 0
};

goog.object.extend(exports, proto.affect);
